def draw_grid(N, placed={}, sets={}):
    grid = [["■■" for _ in range(N)] for _ in range(N)]
    for (x, y), s in sets:
        s = str(s)
        if len(s) == 1:
            s = "0" + s
        grid[y][x] = s
    for n, (x, y) in placed.items():
        n = str(n)
        if len(n) == 1:
            n = "0" + n
        grid[y][x] = n
    print()
    for r in range(N - 1, -1, -1):
        for c in range(N):
            print(grid[r][c], end=" ")
        print()


def get_set_n(N):
    sets = {}
    for y in range(N):
        for x in range(N):
            sets[(x, y)] = "?"
            draw_grid(N, sets=sets)
            n = input(f"({x}, {y})? ")
            sets[(x, y)] = n

    print("sets = {")
    for y in range(N):
        for x in range(N):
            n = sets[(x, y)]
            print(f"({x}, {y}) : {n},")

    print("}")


sets = {
    (0, 0): 0,
    (1, 0): 0,
    (2, 0): 1,
    (3, 0): 2,
    (4, 0): 2,
    (5, 0): 2,
    (6, 0): 2,
    (7, 0): 2,
    (8, 0): 3,
    (9, 0): 4,
    (0, 1): 5,
    (1, 1): 0,
    (2, 1): 1,
    (3, 1): 6,
    (4, 1): 7,
    (5, 1): 7,
    (6, 1): 7,
    (7, 1): 3,
    (8, 1): 3,
    (9, 1): 4,
    (0, 2): 5,
    (1, 2): 0,
    (2, 2): 8,
    (3, 2): 6,
    (4, 2): 6,
    (5, 2): 9,
    (6, 2): 9,
    (7, 2): 9,
    (8, 2): 10,
    (9, 2): 4,
    (0, 3): 5,
    (1, 3): 8,
    (2, 3): 8,
    (3, 3): 6,
    (4, 3): 11,
    (5, 3): 12,
    (6, 3): 12,
    (7, 3): 10,
    (8, 3): 10,
    (9, 3): 4,
    (0, 4): 5,
    (1, 4): 13,
    (2, 4): 13,
    (3, 4): 13,
    (4, 4): 11,
    (5, 4): 11,
    (6, 4): 11,
    (7, 4): 10,
    (8, 4): 10,
    (9, 4): 14,
    (0, 5): 5,
    (1, 5): 13,
    (2, 5): 15,
    (3, 5): 13,
    (4, 5): 13,
    (5, 5): 11,
    (6, 5): 14,
    (7, 5): 14,
    (8, 5): 14,
    (9, 5): 14,
    (0, 6): 13,
    (1, 6): 13,
    (2, 6): 15,
    (3, 6): 15,
    (4, 6): 15,
    (5, 6): 15,
    (6, 6): 14,
    (7, 6): 16,
    (8, 6): 16,
    (9, 6): 16,
    (0, 7): 13,
    (1, 7): 13,
    (2, 7): 13,
    (3, 7): 15,
    (4, 7): 13,
    (5, 7): 13,
    (6, 7): 13,
    (7, 7): 13,
    (8, 7): 16,
    (9, 7): 13,
    (0, 8): 13,
    (1, 8): 13,
    (2, 8): 13,
    (3, 8): 15,
    (4, 8): 13,
    (5, 8): 13,
    (6, 8): 13,
    (7, 8): 13,
    (8, 8): 16,
    (9, 8): 13,
    (0, 9): 13,
    (1, 9): 13,
    (2, 9): 13,
    (3, 9): 13,
    (4, 9): 13,
    (5, 9): 13,
    (6, 9): 13,
    (7, 9): 13,
    (8, 9): 13,
    (9, 9): 13,
}


placed_original = {
    12: (0, 9),
    2: (1, 4),
    14: (3, 6),
    33: (4, 2),
    20: (4, 3),
    8: (6, 7),
    5: (6, 8),
    23: (8, 8),
    28: (9, 0),
}


def get_moves(pos, N):
    moves = []
    for dx, dy in (
        (-2, -1),
        (-2, 1),
        (-1, -2),
        (-1, 2),
        (1, -2),
        (1, 2),
        (2, -1),
        (2, 1),
    ):
        x, y = pos
        x += dx
        y += dy
        if x < 0 or x >= N or y < 0 or y >= N:
            continue
        moves.append((x, y))
    return moves


placed_original_1 = {1: (0, 4), 4: (4, 3), 6: (1, 0)}


sets_1 = {
    (0, 0): 0,
    (1, 0): 1,
    (2, 0): 1,
    (3, 0): 2,
    (4, 0): 2,
    (0, 1): 0,
    (1, 1): 0,
    (2, 1): 0,
    (3, 1): 0,
    (4, 1): 2,
    (0, 2): 2,
    (1, 2): 0,
    (2, 2): 2,
    (3, 2): 2,
    (4, 2): 2,
    (0, 3): 2,
    (1, 3): 2,
    (2, 3): 2,
    (3, 3): 2,
    (4, 3): 2,
    (0, 4): 2,
    (1, 4): 2,
    (2, 4): 2,
    (3, 4): 2,
    (4, 4): 2,
}

if __name__ == "__main__":
    num_sets = 17
    sum_i = 0
    for i in range(100):
        sum_i += i
        if sum_i % num_sets == 0:
            print(i, sum_i, sum_i / num_sets)
